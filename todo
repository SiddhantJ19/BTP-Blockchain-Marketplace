Read the high throughput chaincode
The block listner function is provided for channel ledger tx not the private data. 
Check off-chain chaincode and application if required

Begin the code. FFS

how to describe data ?
single key update
multiple json as data


asset transfer private data
1. Transfer asset - 
    ORGB sets appraisal value for an asset. The asset is on sale by orgA
    also set transferAgreement{assetID} in asset collection (marketplace)

2. To compare the privatedatahash, the contract needs access to the location of
    ORGB's MSP - No, GetPrivateDataHash(collection_name, key) returns just the hash of the data
    the collection name however has to be known.


    Trade ID as key for trade agreement


PRivate data collections
    1. Marketplace - both orgs
    2. DeviceDeals - both orgs - The price at which the org wants to sell device's service
    2. DevicesPrivateDetails - one org
    3. DevicesDataCollection - one org - incoming data from devices stored in respective DEV_ID keys
    4. ACL - oneORG - KEY = TradeID (asset + other org)
    5. CommonCollection - Data sharing key = timestamp + tradeID




1. ORGA adds a devices in the  - DevicePrivateDetails and marketplace 
2. Device sends data to ORGA's  - DevicesDataCollection

4. ORGB range queries the marketplace to see datas on sale

5. ORGB ORGA communicates offchain for the deal
6. ORGA and ORGB updates respective DeviceDeals with some price for the data. TradeID
6.5 --> ORGB also puts the agreement on the marketplace, inorder to confirm that they are bidding as buyer {tradeID , buyerID, DeviceDeals Collection name}

7 ORGA range queries marketplace with tradeID to see who are all bidders

8. Smartcontract checks with valid bidders (those whose privatedatahash matches with that of deal) and Creates ACL for them (maybe time based acc to the deal)
9. The device's data is sent to all the ORGS with ACL True for respective Trade IDs

------------------------------------------------------------------------------
Collections and keys

marketplace
    - deviceID
    - tradeID

DevicePrivateDetailsORG1 = deviceID




----------------------------------------------------------------------------------
Marshalling - convert go object to json
MarshalIndent
    x = json.marshal(obj)
    x == []byte("json_string")
cannot do x.attr

UnMarshalling - convert json to object
    var dJson Message
    err = json.Unmarshal(x, &dJson)

there is no json string
    json == []byte

    GetPrivateData returns []byte != object so need unmarshalling
    Putdata arg []byte so 
    
    GetPrivateData
    Unmarshall to object
    use object
    Marshal object
    Putdata

----------------------------------------------------------------------------------
TODO
1. write dataShare contracts
2. Write Queries contracts
3. Application

------------------------
Trade contract
org1 and org2 uses createTradeAgreement to create an agreement template
then org2 creates an interest token using CreateInterestToken

Org1 queries Marketplace (getAllBidders(tradeIDKey))

-----------------------------------------------------------------
setDeviceStateBasedEndorsement -> sets an endorsementpolicy on the state. only owner peers can update
is this for private collection or the channel world state only
what is the hierarchy of endorsement policies for 
    1. worldstate

    2. privatedatacollection

hierarchy --
2 channels = 1 system channel + multiple application channels

1. System channel level
    members = ordering orgs(those who started the first ordering service) + consortium nodes (the joiners)
    policies here - consensus used and how blocks are created
2. Application channel level
    members = a set of orgs from consortium orgs
    policies = add/remove members from a channel + which orgs need to approve a chaincode before the chaincode is
                defined or committed to the channel

3. Access control list 
    members = application channel members
    policies = resource (getblockbynumber) access ????

4. Smart contract
    every Smartcontract function 
    members = members defined for that Smartcontract
    policy = only these members can and must endorse a given transaction

5. modification policies
    members who can modify the policies

6. state-based endorsement
    in our case we do not touch chaincode level endorsementpolicies
    but for specific key value pairs we can have state-based endorsement
    like owner should endorse a tx to update device details (which is public on private store not on ledger)
----------------------------------------
putonMP
queryMP     (x)
Agreetosell (tradeID)
AgreetoBuy  (tradeID)
InterestToken

ShareData
    - readInterestToken
    - compare agreement hashes
    - update ACL
    -- addData should automatically add Data on Checkint the ACL

November 16 -
Complete Trade contracts

Action Items - 
Seperate into device, data and trade files
device  = CUD
data  = AddData, ACL
Trade = Agreetosell, AgreetoBuy, Trade agreement, interest token, dataShare, invoke, revoke ACL

---------------------------------------------------------------------------------------------
Marketplace
    TRADE_deviceId
    DEVICE_deviceId

DevicePrivateDetails
    deviceID

tradeAgreementCollection
    tradeID

test 5 smcs = 2 devices + 3 trades

-----------------------------------------------------------
Invoke Data sharing
    - takes in a tradeID
    - compare tradeAgreementHashes
        - get corresponding tradeAgreementhash of owner org
        - First find bidder, by querying its interest token
        - get bidder's treadeAgreement
    - updateACL {deviceId: OrgId}

Revoke Data sharing
    - takes in a tradeID
    - queries ACL for this tradeID
    - remove from ACL

DataSharing
    - check ACL for related OrgIds
    - getSharingSpace(orgId)
    - copy to all the sharing spaces






flow:
    - devices create
    - update devices
    - data, past data
    - share: org1 - org2
        - org1 - agree to sell
        - org2 - agree to buy
        - org2 - create interest token
        - org1 read interest token
            - check if agreement are same
            - device specific acl update
            - share data



